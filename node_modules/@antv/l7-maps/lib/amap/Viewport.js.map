{"version":3,"sources":["../../src/amap/Viewport.ts"],"names":["DEGREES_TO_RADIANS","Math","PI","Viewport","projectionMatrix","mat4","create","viewMatrix","viewProjectionMatrix","viewUncenteredMatrix","zoom","center","mapCamera","pitch","bearing","offsetOrigin","cameraHeight","aspect","near","far","fov","pitchInRadians","rotationInRadians","perspective","eye","vec3","fromValues","sin","cos","up","lookAt","clone","translate","multiply","lng","lat","lngLat","scale","maxs","max","min","zoomScale","d","x","y","log","tan","a","b","c"],"mappings":"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","sourcesContent":["import { IMapCamera, IViewport } from '@antv/l7-core';\nimport { mat4, vec3 } from 'gl-matrix';\n\nconst DEGREES_TO_RADIANS = Math.PI / 180;\n\nexport default class Viewport implements IViewport {\n  private projectionMatrix: mat4 = mat4.create();\n  private viewMatrix: mat4 = mat4.create();\n  private viewProjectionMatrix: mat4 = mat4.create();\n  private viewUncenteredMatrix: mat4 = mat4.create();\n  private zoom: number;\n  private center: number[];\n\n  public syncWithMapCamera(mapCamera: Partial<IMapCamera>) {\n    const {\n      zoom = 1,\n      pitch = 0,\n      bearing = 0,\n      center = [0, 0],\n      offsetOrigin = [0, 0],\n      cameraHeight = 1,\n      aspect = 1,\n      near = 0.1,\n      far = 1000,\n      fov = 0,\n    } = mapCamera;\n    this.zoom = zoom;\n    this.center = center;\n\n    const pitchInRadians = pitch * DEGREES_TO_RADIANS;\n    const rotationInRadians = (360 - bearing) * DEGREES_TO_RADIANS;\n\n    // 计算透视投影矩阵 projectionMatrix\n    mat4.perspective(this.projectionMatrix, fov, aspect, near, far);\n\n    // 计算相机矩阵 viewMatrix\n    const eye = vec3.fromValues(\n      cameraHeight * Math.sin(pitchInRadians) * Math.sin(rotationInRadians),\n      -cameraHeight * Math.sin(pitchInRadians) * Math.cos(rotationInRadians),\n      cameraHeight * Math.cos(pitchInRadians),\n    );\n    const up = vec3.fromValues(\n      -Math.cos(pitchInRadians) * Math.sin(rotationInRadians),\n      Math.cos(pitchInRadians) * Math.cos(rotationInRadians),\n      Math.sin(pitchInRadians),\n    );\n    mat4.lookAt(this.viewMatrix, eye, vec3.fromValues(0, 0, 0), up);\n\n    this.viewUncenteredMatrix = mat4.clone(this.viewMatrix);\n\n    // 移动相机位置\n    mat4.translate(\n      this.viewMatrix,\n      this.viewMatrix,\n      vec3.fromValues(-offsetOrigin[0], offsetOrigin[1], 0),\n    );\n\n    mat4.multiply(\n      this.viewProjectionMatrix,\n      this.projectionMatrix,\n      this.viewMatrix,\n    );\n  }\n\n  public getZoom(): number {\n    return this.zoom;\n  }\n\n  public getZoomScale(): number {\n    // 512 尺寸下的缩放：2 ^ 19\n    return 524288;\n  }\n\n  public getCenter(): [number, number] {\n    const [lng, lat] = this.center;\n    return [lng, lat];\n  }\n\n  public getProjectionMatrix(): number[] {\n    // @ts-ignore\n    return this.projectionMatrix;\n  }\n\n  public getViewMatrix(): number[] {\n    // @ts-ignore\n    return this.viewMatrix;\n  }\n\n  public getViewMatrixUncentered(): number[] {\n    // @ts-ignore\n    return this.viewUncenteredMatrix;\n  }\n  public getViewProjectionMatrix(): number[] {\n    // @ts-ignore\n    return this.viewProjectionMatrix;\n  }\n\n  public getFocalDistance() {\n    return 1;\n  }\n\n  /**\n   * P20 坐标系，固定 scale\n   */\n  public projectFlat(\n    lngLat: [number, number],\n    scale?: number | undefined,\n  ): [number, number] {\n    const maxs = 85.0511287798;\n    const lat = Math.max(Math.min(maxs, lngLat[1]), -maxs);\n    // tslint:disable-next-line:no-bitwise\n    const zoomScale = 256 << 20;\n    let d = Math.PI / 180;\n    let x = lngLat[0] * d;\n    let y = lat * d;\n    y = Math.log(Math.tan(Math.PI / 4 + y / 2));\n    const a = 0.5 / Math.PI;\n    const b = 0.5;\n    const c = -0.5 / Math.PI;\n    d = 0.5;\n    x = zoomScale * (a * x + b) - 215440491;\n    y = -(zoomScale * (c * y + d) - 106744817);\n    return [x, y];\n  }\n}\n"],"file":"Viewport.js"}