{"remainingRequest":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/src/views/reportdata/reportLevel/reportLevel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/src/views/reportdata/reportLevel/reportLevel.vue","mtime":1585732847411},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/hoolai/Documents/tyz/workspace-ws/baobao-admin-front/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {queryLevel} from '@/api/index';\nimport {weekChange} from '@/libs/changeWeek';\nimport vTitleHead from '../../game/template/TitleHead';\n\nexport default {\n    name: \"reportLevel\",\n    components: {vTitleHead},\n    data() {\n        return {\n            LevelLoading:true,\n            isShowCondition: false,\n            levelTable: '等级分布',\n            levelTableSum: '聚合等级分布',\n            levelChart: '等级分布',\n            defaultPhone: {\n                all: 0,\n                android: 1,\n                ios: 2\n            },\n            defaultData: {\n                yestoday: 1,\n                week: 7,\n                month: 30\n            },\n            phone: \"0\",\n            data: \"7\",\n            option_levelType: [\n                {\n                    text: '活跃等级分布',\n                    value: 0\n                },\n                {\n                    text: '注册等级分布',\n                    value: 1\n                },\n                {\n                    text: '付费等级分布',\n                    value: 2\n                },\n                {\n                    text: '新付费等级分布',\n                    value: 3\n                },\n                {\n                    text: '新注册付费等级分布',\n                    value: 4\n                },\n            ],\n            levelType: {\n                dau_level: 0,\n                install_level: 1,\n                pay_level: 2,\n                new_pay_level: 3,\n                pay_install_level: 4\n            },\n            reportLevelForm: {\n                index: 0\n            },\n            columnsHeadr: [\n                {\n                    title: '日期（星期）',\n                    key: 'ds',\n                    width: 150,\n                    align: 'center',\n                    fixed: 'left'\n                }\n            ],\n            columsOs: [\n                {\n                    title: '操作系统',\n                    key: 'os',\n                    width: 150,\n                    align: 'center',\n                    fixed: 'left'\n                }\n            ],\n            columsLevel: [],\n            columsLevelSum: [],\n            dauLevelData: [],\n            dauLevelDataSum: [],\n            chartArr: [],\n\n            levelG2: {},\n        }\n    },\n    methods: {\n        enter() {\n            this.isShowCondition = true;\n        },\n        leave() {\n            this.isShowCondition = false;\n        },\n        init() {\n            this.LevelLoading = true;\n            this.queryLevel();\n        },\n        changeType() {\n            this.LevelLoading = true;\n            this.queryLevel();\n        },\n        queryLevel() {\n            let params = {\n                gameid: parseInt(this.getStore('gameid')),\n                date: parseInt(this.data),\n                levelType: parseInt(this.reportLevelForm.index),\n                os: this.phone\n            }\n            queryLevel(params).then(e => {\n                this.LevelLoading = false;\n                if (e.success) {\n                    const dauLevel = e.levelDau;\n                    const dauLevelSum = e.levelDauSum;\n\n                    //最大等级-----------\n                    if (dauLevel && dauLevelSum) {\n                        let maxLevel = 0;\n                        let dauLevelKeys = Object.keys(dauLevel).sort(function (o1, o2) {\n                            if (o1 < o2) {\n                                return 1;\n                            } else if (o1 > o2) {\n                                return -1;\n                            } else {\n                                return 0;\n                            }\n                        });\n                        if (Object.keys(dauLevel).length > 0 && Object.keys(dauLevelSum).length > 0) {\n                            let maxDate = dauLevelKeys[0];\n                            let maxDauLevel = dauLevel[maxDate];\n                            maxLevel = maxDauLevel[maxDauLevel.length - 1].level;\n                        }\n\n                        // 处理表头-----------\n                        let titleLevel = [];\n                        for (let i = 1; i <= maxLevel; i++) {\n                            let dauLevelTitle = new Object();\n                            dauLevelTitle.title = i + '级';\n                            dauLevelTitle.key = i + 'level';\n                            dauLevelTitle.width = 80;\n                            dauLevelTitle.align = 'center';\n                            titleLevel.push(dauLevelTitle);\n                        }\n\n                        let dauLevels = [],\n                            dauLevelSuns = [];\n                        for (let key in dauLevel) {\n                            let dauLevelObj = {};\n                            dauLevelObj.ds = weekChange(dauLevel[key][0].ds);\n                            dauLevelObj.os = weekChange(dauLevel[key][0].os);\n                            for (let i = 1; i <= maxLevel; i++) {\n                                dauLevelObj[i + 'level'] = 0;\n                            }\n                            dauLevel[key].forEach(item => {\n                                if (this.reportLevelForm.index == this.levelType.dau_level) {\n                                    dauLevelObj[item.level + 'level'] = item.dauNum == 0 ? 0 : (item.dauLevelNumbers / item.dauNum * 100).toFixed(2);\n                                } else if (this.reportLevelForm.index == this.levelType.install_level) {\n                                    dauLevelObj[item.level + 'level'] = item.installNum == 0 ? 0 : (item.installLevelNumbers / item.installNum * 100).toFixed(2);\n                                } else if (this.reportLevelForm.index == this.levelType.pay_level) {\n                                    dauLevelObj[item.level + 'level'] = item.payCount == 0 ? 0 : (item.payLevelNumbers / item.payCount * 100).toFixed(2);\n                                } else if (this.reportLevelForm.index == this.levelType.new_pay_level) {\n                                    dauLevelObj[item.level + 'level'] = item.newPayCount == 0 ? 0 : (item.newPayLevelNumbers / item.newPayCount * 100).toFixed(2);\n                                } else if (this.reportLevelForm.index == this.levelType.pay_install_level) {\n                                    dauLevelObj[item.level + 'level'] = item.payInstallCount == 0 ? 0 : (item.payInstallLevelNumbers / item.payInstallCount * 100).toFixed(2);\n                                }\n                            })\n                            dauLevels.push(dauLevelObj);\n                        }\n                        //聚合数据----------\n                        let dauLevelSumTitleNum = Math.ceil(maxLevel / 10);\n                        let chartArr = [];\n                        let titleLevelSum = [];\n                        for (let i = 1; i <= dauLevelSumTitleNum; i++) {\n                            let dauLevelSumTitle = new Object();\n                            dauLevelSumTitle[i * 10 + 'level'] = (i * 10 - 9) + \"~\" + i * 10 + '级';\n                            dauLevelSumTitle.title = (i * 10 - 9) + \"~\" + i * 10 + '级';\n                            dauLevelSumTitle.key = i * 10 + 'level';\n                            dauLevelSumTitle.width = 100;\n                            dauLevelSumTitle.align = 'center';\n                            titleLevelSum.push(dauLevelSumTitle);\n                        }\n\n                        for (let key in dauLevelSum) {\n                            let dauLevelSumObject = {};\n                            dauLevelSumObject.ds = weekChange(dauLevelSum[key][0].ds);\n                            dauLevelSumObject.os = weekChange(dauLevelSum[key][0].os);\n                            dauLevelSum[key].forEach((item, index) => {\n                                //层叠柱状图data处理\n                                let chartObj = new Object();\n                                chartObj.name = ((index + 1) * 10 - 9) + \"~\" + (index + 1) * 10 + '级';\n                                chartObj.time = key.substr(5, 5);\n\n                                if (this.reportLevelForm.index == this.levelType.dau_level) {\n                                    dauLevelSumObject[(index + 1) * 10 + 'level'] = item.dauNum == 0 ? 0 : (item.dauLevelNumbers / item.dauNum * 100).toFixed(2);\n                                    chartObj.value = item.dauNum == 0 ? 0 : parseFloat((item.dauLevelNumbers / item.dauNum * 100).toFixed(2));\n                                } else if (this.reportLevelForm.index == this.levelType.install_level) {\n                                    dauLevelSumObject[(index + 1) * 10 + 'level'] = item.dauNum == 0 ? 0 : (item.dauLevelNumbers / item.installNum * 100).toFixed(2);\n                                    chartObj.value = item.dauNum == 0 ? 0 : parseFloat((item.dauLevelNumbers / item.installNum * 100).toFixed(2));\n                                } else if (this.reportLevelForm.index == this.levelType.pay_level) {\n                                    dauLevelSumObject[(index + 1) * 10 + 'level'] = item.dauNum == 0 ? 0 : (item.dauLevelNumbers / item.payCount * 100).toFixed(2);\n                                    chartObj.value = item.dauNum == 0 ? 0 : parseFloat((item.dauLevelNumbers / item.payCount * 100).toFixed(2));\n                                } else if (this.reportLevelForm.index == this.levelType.new_pay_level) {\n                                    dauLevelSumObject[(index + 1) * 10 + 'level'] = item.dauNum == 0 ? 0 : (item.dauLevelNumbers / item.newPayCount * 100).toFixed(2);\n                                    chartObj.value = item.dauNum == 0 ? 0 : parseFloat((item.dauLevelNumbers / item.newPayCount * 100).toFixed(2));\n                                } else if (this.reportLevelForm.index == this.levelType.pay_install_level) {\n                                    dauLevelSumObject[(index + 1) * 10 + 'level'] = item.dauNum == 0 ? 0 : (item.dauLevelNumbers / item.payInstallCount * 100).toFixed(2);\n                                    chartObj.value = item.dauNum == 0 ? 0 : parseFloat((item.dauLevelNumbers / item.payInstallCount * 100).toFixed(2));\n                                }\n\n\n                                chartArr.push(chartObj);\n                            })\n                            dauLevelSuns.push(dauLevelSumObject);\n                        }\n                        chartArr.sort(function (a, b) {\n                            if (a.time < b.time) {\n                                return -1;\n                            } else if (a.time > b.time) {\n                                return 1;\n                            } else {\n                                return 0;\n                            }\n                        })\n                        dauLevels.sort(function (obj1, obj2) {\n                            var val1 = obj1.ds;\n                            var val2 = obj2.ds;\n                            if (val1 < val2) {\n                                return 1;\n                            } else if (val1 > val2) {\n                                return -1;\n                            } else {\n                                return 0;\n                            }\n                        });\n                        dauLevelSuns.sort(function (obj1, obj2) {\n                            var val1 = obj1.ds;\n                            var val2 = obj2.ds;\n                            if (val1 < val2) {\n                                return 1;\n                            } else if (val1 > val2) {\n                                return -1;\n                            } else {\n                                return 0;\n                            }\n                        });\n                        if (this.phone == this.defaultPhone.android || this.phone == this.defaultPhone.ios) {\n                            this.columsLevel = this.columnsHeadr.concat(this.columsOs).concat(titleLevel);\n                            this.columsLevelSum = this.columnsHeadr.concat(this.columsOs).concat(titleLevelSum);\n                        } else {\n                            this.columsLevel = this.columnsHeadr.concat(titleLevel);\n                            this.columsLevelSum = this.columnsHeadr.concat(titleLevelSum);\n                        }\n                        this.dauLevelData = dauLevels;\n                        this.dauLevelDataSum = dauLevelSuns;\n                        this.chartArr = chartArr;\n                    }\n                    this.levelG2.changeData(this.chartArr);\n                }\n            })\n        },\n\n        levelCharts() {\n            this.levelG2 = new G2.Chart({\n                container: 'levelChart',\n                forceFit: true,\n                height: 500\n            });\n            this.levelG2.source(this.chartArr, {\n                value: {\n                    min: 0,\n                    formatter(val) {\n                        return val + '%';\n                    }\n                }\n            });\n            this.levelG2.axis('time', {\n                label: {\n                    rotate: -Math.PI / 2.5,\n                    textAlign: 'end',\n                    textBaseline: 'middle'\n                }\n            });\n            this.levelG2.intervalStack()\n                .position('time*value')\n                .color('name').adjust('stack').shape('text');\n            this.levelG2.render();\n        },\n        compares: function (obj1, obj2) {\n            var val1 = obj1.ds;\n            var val2 = obj2.ds;\n            if (val1 < val2) {\n                return 1;\n            } else if (val1 > val2) {\n                return -1;\n            } else {\n                return 0;\n            }\n        },\n    },\n    mounted() {\n        this.levelCharts();\n        this.init();\n    },\n}\n",null]}