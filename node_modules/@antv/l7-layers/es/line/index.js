import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import BaseLayer from '../core/BaseLayer';
import LineModels from './models';

var LineLayer = function (_BaseLayer) {
  _inherits(LineLayer, _BaseLayer);

  function LineLayer() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, LineLayer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LineLayer)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.type = 'LineLayer';
    return _this;
  }

  _createClass(LineLayer, [{
    key: "buildModels",
    value: function buildModels() {
      var shape = this.getModelType();
      this.layerModel = new LineModels[shape](this);
      this.models = this.layerModel.buildModels();
    }
  }, {
    key: "getConfigSchema",
    value: function getConfigSchema() {
      return {
        properties: {
          opacity: {
            type: 'number',
            minimum: 0,
            maximum: 1
          }
        }
      };
    }
  }, {
    key: "getDefaultConfig",
    value: function getDefaultConfig() {
      var type = this.getModelType();
      var defaultConfig = {
        line: {},
        arc3d: {
          blend: 'additive'
        },
        arc: {
          blend: 'additive'
        },
        greatcircle: {
          blend: 'additive'
        }
      };
      return defaultConfig[type];
    }
  }, {
    key: "getModelType",
    value: function getModelType() {
      var _shapeAttribute$scale;

      var shapeAttribute = this.styleAttributeService.getLayerStyleAttribute('shape');
      var shape = shapeAttribute === null || shapeAttribute === void 0 ? void 0 : (_shapeAttribute$scale = shapeAttribute.scale) === null || _shapeAttribute$scale === void 0 ? void 0 : _shapeAttribute$scale.field;
      return shape || 'line';
    }
  }]);

  return LineLayer;
}(BaseLayer);

export { LineLayer as default };
//# sourceMappingURL=index.js.map