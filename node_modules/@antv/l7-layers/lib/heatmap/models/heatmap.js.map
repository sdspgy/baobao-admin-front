{"version":3,"sources":["../../../src/heatmap/models/heatmap.ts"],"names":["HeatMapModel","texture","colorTexture","heatmapFramerBuffer","intensityModel","colorModel","shapeType","rendererService","clear","useFramebuffer","color","depth","stencil","framebuffer","drawIntensityMode","drawColorMode","draw3DHeatMap","Error","createFramebuffer","getViewportSize","createTexture2D","shapeAttr","styleAttributeService","getLayerStyleAttribute","scale","field","buildHeatMapIntensity","buildHeatmapColor","build3dHeatMap","layer","getLayerConfig","rampColors","imageData","width","height","Math","floor","wrapS","gl","CLAMP_TO_EDGE","wrapT","min","LINEAR","mag","data","NEAREST","flipY","registerStyleAttribute","name","type","AttributeType","Attribute","descriptor","buffer","usage","DYNAMIC_DRAW","FLOAT","size","update","feature","featureIdx","vertex","attributeIdx","buildLayerModel","moduleName","vertexShader","heatmapVert","fragmentShader","heatmapFrag","triangulation","HeatmapTriangulation","enable","blend","func","srcRGB","ONE","srcAlpha","dstRGB","dstAlpha","shaderModuleService","registerModule","vs","heatmapColorVert","fs","heatmapColorFrag","getModule","uniforms","createAttribute","createElements","createBuffer","createModel","attributes","a_Position","a_Uv","getBlend","count","elements","UNSIGNED_INT","opacity","intensity","radius","draw","u_opacity","u_radius","u_intensity","u_colorTexture","u_texture","invert","mat4","create","fromValues","cameraService","getViewProjectionMatrix","u_InverseViewProjectionMatrix","heatmap3DVert","heatmap3DFrag","vertices","uvs","primitive","TRIANGLES","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","indices","length","BaseModel"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  IFramebuffer,\n  IModel,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\nimport { generateColorRamp, IColorRamp } from '@antv/l7-utils';\nimport { mat4 } from 'gl-matrix';\nimport BaseModel from '../../core/BaseModel';\nimport { HeatmapTriangulation } from '../../core/triangulation';\nimport heatmap3DFrag from '../shaders/heatmap_3d_frag.glsl';\nimport heatmap3DVert from '../shaders/heatmap_3d_vert.glsl';\nimport heatmapColorFrag from '../shaders/heatmap_frag.glsl';\nimport heatmapFrag from '../shaders/heatmap_framebuffer_frag.glsl';\nimport heatmapVert from '../shaders/heatmap_framebuffer_vert.glsl';\nimport heatmapColorVert from '../shaders/heatmap_vert.glsl';\nimport { heatMap3DTriangulation } from '../triangulation';\ninterface IHeatMapLayerStyleOptions {\n  opacity: number;\n  intensity: number;\n  radius: number;\n  angle: number;\n  rampColors: IColorRamp;\n}\n\nexport default class HeatMapModel extends BaseModel {\n  protected texture: ITexture2D;\n  protected colorTexture: ITexture2D;\n  protected heatmapFramerBuffer: IFramebuffer;\n  private intensityModel: IModel;\n  private colorModel: IModel;\n  private shapeType: string;\n\n  public render() {\n    const { clear, useFramebuffer } = this.rendererService;\n    useFramebuffer(this.heatmapFramerBuffer, () => {\n      clear({\n        color: [0, 0, 0, 0],\n        depth: 1,\n        stencil: 0,\n        framebuffer: this.heatmapFramerBuffer,\n      });\n      this.drawIntensityMode();\n    });\n    this.shapeType === 'heatmap' ? this.drawColorMode() : this.draw3DHeatMap();\n  }\n\n  public getUninforms(): IModelUniform {\n    throw new Error('Method not implemented.');\n  }\n\n  public buildModels(): IModel[] {\n    const {\n      createFramebuffer,\n      clear,\n      getViewportSize,\n      createTexture2D,\n      useFramebuffer,\n    } = this.rendererService;\n    const shapeAttr = this.styleAttributeService.getLayerStyleAttribute(\n      'shape',\n    );\n    const shapeType = shapeAttr?.scale?.field || 'heatmap';\n    this.shapeType = shapeType as string;\n    // 生成热力图密度图\n    this.intensityModel = this.buildHeatMapIntensity();\n    // 渲染到屏幕\n    this.colorModel =\n      shapeType === 'heatmap'\n        ? this.buildHeatmapColor() // 2D\n        : this.build3dHeatMap(); // 3D\n\n    const {\n      rampColors,\n    } = this.layer.getLayerConfig() as IHeatMapLayerStyleOptions;\n    const imageData = generateColorRamp(rampColors as IColorRamp);\n    const { width, height } = getViewportSize();\n\n    // 初始化密度图纹理\n    this.heatmapFramerBuffer = createFramebuffer({\n      color: createTexture2D({\n        width: Math.floor(width / 4),\n        height: Math.floor(height / 4),\n        wrapS: gl.CLAMP_TO_EDGE,\n        wrapT: gl.CLAMP_TO_EDGE,\n        min: gl.LINEAR,\n        mag: gl.LINEAR,\n      }),\n      depth: false,\n    });\n\n    // 初始化颜色纹理\n\n    this.colorTexture = createTexture2D({\n      data: imageData.data,\n      width: imageData.width,\n      height: imageData.height,\n      wrapS: gl.CLAMP_TO_EDGE,\n      wrapT: gl.CLAMP_TO_EDGE,\n      min: gl.NEAREST,\n      mag: gl.NEAREST,\n      flipY: false,\n    });\n\n    return [this.intensityModel, this.colorModel];\n  }\n  protected registerBuiltinAttributes() {\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'dir',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Dir',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          return [vertex[3], vertex[4]];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 1 } = feature;\n          return [size as number];\n        },\n      },\n    });\n  }\n  private buildHeatMapIntensity(): IModel {\n    return this.layer.buildLayerModel({\n      moduleName: 'heatmapintensity',\n      vertexShader: heatmapVert,\n      fragmentShader: heatmapFrag,\n      triangulation: HeatmapTriangulation,\n      depth: {\n        enable: false,\n      },\n      blend: {\n        enable: true,\n        func: {\n          srcRGB: gl.ONE,\n          srcAlpha: 1,\n          dstRGB: gl.ONE,\n          dstAlpha: 1,\n        },\n      },\n    });\n  }\n\n  private buildHeatmapColor(): IModel {\n    this.shaderModuleService.registerModule('heatmapColor', {\n      vs: heatmapColorVert,\n      fs: heatmapColorFrag,\n    });\n\n    const { vs, fs, uniforms } = this.shaderModuleService.getModule(\n      'heatmapColor',\n    );\n    const {\n      createAttribute,\n      createElements,\n      createBuffer,\n      createModel,\n    } = this.rendererService;\n    return createModel({\n      vs,\n      fs,\n      attributes: {\n        a_Position: createAttribute({\n          buffer: createBuffer({\n            data: [-1, 1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0],\n            type: gl.FLOAT,\n          }),\n          size: 3,\n        }),\n        a_Uv: createAttribute({\n          buffer: createBuffer({\n            data: [0, 1, 1, 1, 0, 0, 1, 0],\n            type: gl.FLOAT,\n          }),\n          size: 2,\n        }),\n      },\n      uniforms: {\n        ...uniforms,\n      },\n      depth: {\n        enable: false,\n      },\n      blend: this.getBlend(),\n      count: 6,\n      elements: createElements({\n        data: [0, 2, 1, 2, 3, 1],\n        type: gl.UNSIGNED_INT,\n        count: 6,\n      }),\n    });\n  }\n\n  private drawIntensityMode() {\n    const {\n      opacity,\n      intensity = 10,\n      radius = 5,\n    } = this.layer.getLayerConfig() as IHeatMapLayerStyleOptions;\n    this.intensityModel.draw({\n      uniforms: {\n        u_opacity: opacity || 1.0,\n        u_radius: radius,\n        u_intensity: intensity,\n      },\n    });\n  }\n\n  private drawColorMode() {\n    const {\n      opacity,\n    } = this.layer.getLayerConfig() as IHeatMapLayerStyleOptions;\n    this.colorModel.draw({\n      uniforms: {\n        u_opacity: opacity || 1.0,\n        u_colorTexture: this.colorTexture,\n        u_texture: this.heatmapFramerBuffer,\n      },\n    });\n  }\n\n  private draw3DHeatMap() {\n    const {\n      opacity,\n    } = this.layer.getLayerConfig() as IHeatMapLayerStyleOptions;\n    const invert = mat4.invert(\n      mat4.create(),\n      // @ts-ignore\n      mat4.fromValues(...this.cameraService.getViewProjectionMatrix()),\n    ) as mat4;\n    this.colorModel.draw({\n      uniforms: {\n        u_opacity: opacity || 1.0,\n        u_colorTexture: this.colorTexture,\n        u_texture: this.heatmapFramerBuffer,\n        u_InverseViewProjectionMatrix: [...invert],\n      },\n    });\n  }\n  private build3dHeatMap() {\n    const { getViewportSize } = this.rendererService;\n    const { width, height } = getViewportSize();\n    const triangulation = heatMap3DTriangulation(width / 4.0, height / 4.0);\n    this.shaderModuleService.registerModule('heatmap3dColor', {\n      vs: heatmap3DVert,\n      fs: heatmap3DFrag,\n    });\n\n    const { vs, fs, uniforms } = this.shaderModuleService.getModule(\n      'heatmap3dColor',\n    );\n    const {\n      createAttribute,\n      createElements,\n      createBuffer,\n      createModel,\n    } = this.rendererService;\n    return createModel({\n      vs,\n      fs,\n      attributes: {\n        a_Position: createAttribute({\n          buffer: createBuffer({\n            data: triangulation.vertices,\n            type: gl.FLOAT,\n          }),\n          size: 3,\n        }),\n        a_Uv: createAttribute({\n          buffer: createBuffer({\n            data: triangulation.uvs,\n            type: gl.FLOAT,\n          }),\n          size: 2,\n        }),\n      },\n      primitive: gl.TRIANGLES,\n      uniforms: {\n        ...uniforms,\n      },\n      depth: {\n        enable: true,\n      },\n      blend: {\n        enable: true,\n        func: {\n          srcRGB: gl.SRC_ALPHA,\n          srcAlpha: 1,\n          dstRGB: gl.ONE_MINUS_SRC_ALPHA,\n          dstAlpha: 1,\n        },\n      },\n      elements: createElements({\n        data: triangulation.indices,\n        type: gl.UNSIGNED_INT,\n        count: triangulation.indices.length,\n      }),\n    });\n  }\n}\n"],"file":"heatmap.js"}