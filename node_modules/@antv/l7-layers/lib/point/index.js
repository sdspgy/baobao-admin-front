"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _BaseLayer2 = _interopRequireDefault(require("../core/BaseLayer"));

var _index = _interopRequireDefault(require("./models/index"));

var PointLayer = function (_BaseLayer) {
  (0, _inherits2.default)(PointLayer, _BaseLayer);

  function PointLayer() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, PointLayer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(PointLayer)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.type = 'PointLayer';
    return _this;
  }

  (0, _createClass2.default)(PointLayer, [{
    key: "buildModels",
    value: function buildModels() {
      var modelType = this.getModelType();
      this.layerModel = new _index.default[modelType](this);
      this.models = this.layerModel.buildModels();
    }
  }, {
    key: "getConfigSchema",
    value: function getConfigSchema() {
      return {
        properties: {
          opacity: {
            type: 'number',
            minimum: 0,
            maximum: 1
          }
        }
      };
    }
  }, {
    key: "getDefaultConfig",
    value: function getDefaultConfig() {
      var type = this.getModelType();
      var defaultConfig = {
        normal: {
          blend: 'additive'
        },
        fill: {
          blend: 'normal'
        },
        extrude: {},
        image: {},
        icon: {},
        text: {
          blend: 'normal'
        }
      };
      return defaultConfig[type];
    }
  }, {
    key: "getModelType",
    value: function getModelType() {
      var layerData = this.getEncodedData();

      var _this$getLayerConfig = this.getLayerConfig(),
          shape2d = _this$getLayerConfig.shape2d,
          shape3d = _this$getLayerConfig.shape3d;

      var iconMap = this.iconService.getIconMap();
      var item = layerData.find(function (fe) {
        return fe.hasOwnProperty('shape');
      });

      if (!item) {
        return 'normal';
      } else {
        var shape = item.shape;

        if (shape === 'dot') {
          return 'normal';
        }

        if ((shape2d === null || shape2d === void 0 ? void 0 : shape2d.indexOf(shape)) !== -1) {
          return 'fill';
        }

        if ((shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) !== -1) {
          return 'extrude';
        }

        if (iconMap.hasOwnProperty(shape)) {
          return 'image';
        }

        if (this.fontService.getGlyph(shape) !== '') {
          return 'icon';
        }

        return 'text';
      }
    }
  }]);
  return PointLayer;
}(_BaseLayer2.default);

exports.default = PointLayer;
//# sourceMappingURL=index.js.map