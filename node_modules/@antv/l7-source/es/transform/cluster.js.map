{"version":3,"sources":["../../src/transform/cluster.ts"],"names":["Supercluster","cluster","data","option","radius","maxZoom","minZoom","field","zoom","pointIndex","clusterData","getClusters","extent","Math","floor","dataArray","formatData","map","props","sum","reduce","accumulated","geojson","type","features","item","properties","geometry","coordinates","load","clusterPoint","resultData","point","index","_id"],"mappings":"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","sourcesContent":["import { IParserCfg, IParserData, ISourceCFG, ITransform } from '@antv/l7-core';\n// @ts-ignore\n// tslint:disable-next-line:no-submodule-imports\nimport Supercluster from 'supercluster/dist/supercluster';\nexport function cluster(data: IParserData, option: ITransform): IParserData {\n  const { radius = 80, maxZoom = 18, minZoom = 0, field, zoom = 2 } = option;\n  if (data.pointIndex) {\n    const clusterData = data.pointIndex.getClusters(\n      data.extent,\n      Math.floor(zoom),\n    );\n    data.dataArray = formatData(clusterData);\n    return data;\n  }\n  const pointIndex = new Supercluster({\n    radius,\n    minZoom,\n    maxZoom,\n    map: (props: any) => ({ sum: props[field] }), // 根据指定字段求和\n    reduce: (accumulated: any, props: any) => {\n      accumulated.sum += props.sum;\n    },\n  });\n  const geojson: {\n    type: string;\n    features: any[];\n  } = {\n    type: 'FeatureCollection',\n    features: [],\n  };\n  geojson.features = data.dataArray.map((item) => {\n    return {\n      type: 'Feature',\n      properties: {\n        [field]: item[field],\n      },\n      geometry: {\n        type: 'Point',\n        coordinates: item.coordinates,\n      },\n    };\n  });\n  pointIndex.load(geojson.features);\n  const clusterPoint = pointIndex.getClusters(data.extent, zoom);\n  const resultData = clusterPoint.map((point: any, index: number) => {\n    return {\n      coordinates: point.geometry.coordinates,\n      _id: index + 1,\n      ...point.properties,\n    };\n  });\n  data.dataArray = resultData;\n  data.pointIndex = pointIndex;\n  return data;\n}\nexport function formatData(clusterPoint: any[]) {\n  return clusterPoint.map((point, index) => {\n    return {\n      coordinates: point.geometry.coordinates,\n      _id: index + 1,\n      ...point.properties,\n    };\n  });\n}\n"],"file":"cluster.js"}