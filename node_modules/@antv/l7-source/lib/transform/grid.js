"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.aggregatorToGrid = aggregatorToGrid;

var _l7Utils = require("@antv/l7-utils");

var R_EARTH = 6378000;

function aggregatorToGrid(data, option) {
  var dataArray = data.dataArray;
  var _option$size = option.size,
      size = _option$size === void 0 ? 10 : _option$size;

  var _pointsGridHash2 = _pointsGridHash(dataArray, size),
      gridHash = _pointsGridHash2.gridHash,
      gridOffset = _pointsGridHash2.gridOffset;

  var layerData = _getGridLayerDataFromGridHash(gridHash, gridOffset, option);

  return {
    yOffset: gridOffset.yOffset / 2,
    xOffset: gridOffset.xOffset / 2,
    radius: gridOffset.xOffset,
    type: 'grid',
    dataArray: layerData
  };
}

function _pointsGridHash(dataArray, size) {
  var latMin = Infinity;
  var latMax = -Infinity;
  var pLat;
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = dataArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var point = _step.value;
      pLat = point.coordinates[1];

      if (Number.isFinite(pLat)) {
        latMin = pLat < latMin ? pLat : latMin;
        latMax = pLat > latMax ? pLat : latMax;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return != null) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  var centerLat = (latMin + latMax) / 2;

  var gridOffset = _calculateGridLatLonOffset(size, centerLat);

  if (gridOffset.xOffset <= 0 || gridOffset.yOffset <= 0) {
    return {
      gridHash: {},
      gridOffset: gridOffset
    };
  }

  var gridHash = {};
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = dataArray[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _point = _step2.value;
      var lat = _point.coordinates[1];
      var lng = _point.coordinates[0];

      if (Number.isFinite(lat) && Number.isFinite(lng)) {
        var latIdx = Math.floor((lat + 90) / gridOffset.yOffset);
        var lonIdx = Math.floor((lng + 180) / gridOffset.xOffset);

        var _key = "".concat(latIdx, "-").concat(lonIdx);

        gridHash[_key] = gridHash[_key] || {
          count: 0,
          points: []
        };
        gridHash[_key].count += 1;

        gridHash[_key].points.push(_point);
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  return {
    gridHash: gridHash,
    gridOffset: gridOffset
  };
}

function _calculateGridLatLonOffset(cellSize, latitude) {
  var yOffset = _calculateLatOffset(cellSize);

  var xOffset = _calculateLonOffset(latitude, cellSize);

  return {
    yOffset: yOffset,
    xOffset: xOffset
  };
}

function _calculateLatOffset(dy) {
  return dy / R_EARTH * (180 / Math.PI);
}

function _calculateLonOffset(lat, dx) {
  return dx / R_EARTH * (180 / Math.PI) / Math.cos(lat * Math.PI / 180);
}

function _getGridLayerDataFromGridHash(gridHash, gridOffset, option) {
  return Object.keys(gridHash).reduce(function (accu, key, i) {
    var idxs = key.split('-');
    var latIdx = parseInt(idxs[0], 10);
    var lonIdx = parseInt(idxs[1], 10);
    var item = {};

    if (option.field && option.method) {
      var columns = _l7Utils.Satistics.getColumn(gridHash[key].points, option.field);

      item[option.method] = _l7Utils.Satistics.statMap[option.method](columns);
    }

    Object.assign(item, {
      _id: i,
      coordinates: [-180 + gridOffset.xOffset * (lonIdx + 0.5), -90 + gridOffset.yOffset * (latIdx + 0.5)],
      rawData: gridHash[key].points,
      count: gridHash[key].count
    });
    accu.push(item);
    return accu;
  }, []);
}
//# sourceMappingURL=grid.js.map