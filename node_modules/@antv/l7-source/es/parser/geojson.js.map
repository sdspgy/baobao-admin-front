{"version":3,"sources":["../../src/parser/geojson.ts"],"names":["rewind","getCoords","turfMeta","geoJSON","data","cfg","resultData","featureKeys","features","filter","item","geometry","type","coordinates","length","dataArray","i","flattenEach","currentFeature","featureIndex","coord","id","forEach","coor","dataItem","properties","_id","push"],"mappings":";;;;;;AACA,OAAOA,MAAP,MAAmB,wBAAnB;AAQA,SAASC,SAAT,QAA0B,iBAA1B;AACA,OAAO,KAAKC,QAAZ,MAA0B,YAA1B;AASA,eAAe,SAASC,OAAT,CACbC,IADa,EAEbC,GAFa,EAGA;AACbL,EAAAA,MAAM,CAACI,IAAD,EAAO,IAAP,CAAN;AACA,MAAME,UAA4B,GAAG,EAArC;AACA,MAAMC,WAAwB,GAAG,EAAjC;AACAH,EAAAA,IAAI,CAACI,QAAL,GAAgBJ,IAAI,CAACI,QAAL,CAAcC,MAAd,CAAqB,UAACC,IAAD,EAAmB;AACtD,QAAMC,QAAyB,GAAGD,IAAI,CAACC,QAAvC;AACA,WACED,IAAI,IAAI,IAAR,IACAC,QADA,IAEAA,QAAQ,CAACC,IAFT,IAGAD,QAAQ,CAACE,WAHT,IAIAF,QAAQ,CAACE,WAAT,CAAqBC,MAArB,GAA8B,CALhC;AAOD,GATe,CAAhB;;AAUA,MAAIV,IAAI,CAACI,QAAL,CAAcM,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,WAAO;AACLC,MAAAA,SAAS,EAAE,EADN;AAELR,MAAAA,WAAW,EAAXA;AAFK,KAAP;AAID;;AAED,MAAMS,CAAC,GAAG,CAAV;AAEAd,EAAAA,QAAQ,CAACe,WAAT,CACEb,IADF,EAEE,UAACc,cAAD,EAAkDC,YAAlD,EAA2E;AACzE,QAAMC,KAAK,GAAGnB,SAAS,CAACiB,cAAD,CAAvB;AACA,QAAMG,EAAE,GAAGF,YAAX;;AACA,QAAID,cAAc,CAACP,QAAf,CAAwBC,IAAxB,KAAiC,SAArC,EAAgD;AAC9CQ,MAAAA,KAAK,CAACE,OAAN,CAAc,UAACC,IAAD,EAAU;AACtB,YAAMC,QAAQ,qBACTN,cAAc,CAACO,UADN;AAEZZ,UAAAA,WAAW,EAAE,CAACU,IAAD,CAFD;AAGZG,UAAAA,GAAG,EAAEL;AAHO,UAAd;;AAKAf,QAAAA,UAAU,CAACqB,IAAX,CAAgBH,QAAhB;AACD,OAPD;AAQD,KATD,MASO;AACL,UAAMA,QAAwB,qBACzBN,cAAc,CAACO,UADU;AAE5BZ,QAAAA,WAAW,EAAEO,KAFe;AAG5BM,QAAAA,GAAG,EAAEL;AAHuB,QAA9B;;AAKAf,MAAAA,UAAU,CAACqB,IAAX,CAAgBH,QAAhB;AACD;AACF,GAtBH;AAwBA,SAAO;AACLT,IAAAA,SAAS,EAAET,UADN;AAELC,IAAAA,WAAW,EAAXA;AAFK,GAAP;AAID","sourcesContent":["// @ts-ignore\nimport rewind from '@mapbox/geojson-rewind';\nimport {\n  Feature,\n  FeatureCollection,\n  Geometries,\n  Geometry,\n  Properties,\n} from '@turf/helpers';\nimport { getCoords } from '@turf/invariant';\nimport * as turfMeta from '@turf/meta';\nimport { IFeatureKey, IParseDataItem, IParserData } from '../interface';\ninterface IGeoJSON {\n  features: object[];\n}\ninterface IParserCFG {\n  idField?: string;\n  [key: string]: any;\n}\nexport default function geoJSON(\n  data: FeatureCollection<Geometries, Properties>,\n  cfg?: IParserCFG,\n): IParserData {\n  rewind(data, true); // 设置地理多边形方向 If clockwise is true, the outer ring is clockwise, otherwise it is counterclockwise.\n  const resultData: IParseDataItem[] = [];\n  const featureKeys: IFeatureKey = {};\n  data.features = data.features.filter((item: Feature) => {\n    const geometry: Geometry | null = item.geometry as Geometry;\n    return (\n      item != null &&\n      geometry &&\n      geometry.type &&\n      geometry.coordinates &&\n      geometry.coordinates.length > 0\n    );\n  });\n  if (data.features.length === 0) {\n    return {\n      dataArray: [],\n      featureKeys,\n    };\n  }\n  // 数据为空时处理\n  const i = 0;\n  // multi polygon 拆分\n  turfMeta.flattenEach(\n    data,\n    (currentFeature: Feature<Geometries, Properties>, featureIndex: number) => {\n      const coord = getCoords(currentFeature);\n      const id = featureIndex;\n      if (currentFeature.geometry.type === 'Polygon') {\n        coord.forEach((coor) => {\n          const dataItem = {\n            ...currentFeature.properties,\n            coordinates: [coor],\n            _id: id,\n          };\n          resultData.push(dataItem);\n        });\n      } else {\n        const dataItem: IParseDataItem = {\n          ...currentFeature.properties,\n          coordinates: coord,\n          _id: id,\n        };\n        resultData.push(dataItem);\n      }\n    },\n  );\n  return {\n    dataArray: resultData,\n    featureKeys,\n  };\n}\n"],"file":"geojson.js"}