import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _get from "@babel/runtime/helpers/get";
import _inherits from "@babel/runtime/helpers/inherits";

var _dec, _class;

import { injectable } from 'inversify';
import { PassType } from '../IMultiPassRenderer';
import BaseNormalPass from './BaseNormalPass';
var RenderPass = (_dec = injectable(), _dec(_class = function (_BaseNormalPass) {
  _inherits(RenderPass, _BaseNormalPass);

  function RenderPass() {
    _classCallCheck(this, RenderPass);

    return _possibleConstructorReturn(this, _getPrototypeOf(RenderPass).apply(this, arguments));
  }

  _createClass(RenderPass, [{
    key: "getType",
    value: function getType() {
      return PassType.Normal;
    }
  }, {
    key: "getName",
    value: function getName() {
      return 'render';
    }
  }, {
    key: "init",
    value: function init(layer, config) {
      _get(_getPrototypeOf(RenderPass.prototype), "init", this).call(this, layer, config);
    }
  }, {
    key: "render",
    value: function render(layer) {
      var _this$rendererService = this.rendererService,
          useFramebuffer = _this$rendererService.useFramebuffer,
          clear = _this$rendererService.clear;
      var readFBO = layer.multiPassRenderer.getPostProcessor().getReadFBO();
      useFramebuffer(readFBO, function () {
        clear({
          color: [0, 0, 0, 0],
          depth: 1,
          stencil: 0,
          framebuffer: readFBO
        });
        layer.multiPassRenderer.setRenderFlag(false);
        layer.render();
        layer.multiPassRenderer.setRenderFlag(true);
      });
    }
  }]);

  return RenderPass;
}(BaseNormalPass)) || _class);
export { RenderPass as default };
//# sourceMappingURL=RenderPass.js.map