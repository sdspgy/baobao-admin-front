{"version":3,"sources":["../../../src/point/models/image.ts"],"names":["AttributeType","gl","BaseModel","PointImageTriangulation","ImageModel","texture","layer","getLayerConfig","opacity","u_opacity","u_texture","u_textSize","iconService","canvasHeight","registerBuiltinAttributes","updateTexture","on","render","buildLayerModel","moduleName","vertexShader","pointImageVert","fragmentShader","pointImageFrag","triangulation","primitive","POINTS","depth","enable","blend","getBlend","styleAttributeService","registerStyleAttribute","name","type","Attribute","descriptor","buffer","usage","DYNAMIC_DRAW","data","FLOAT","size","update","feature","featureIdx","vertex","attributeIdx","Array","isArray","iconMap","getIconMap","shape","x","y","createTexture2D","rendererService","getCanvas","mag","LINEAR","min","width","height"],"mappings":"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","sourcesContent":["import {\n  AttributeType,\n  gl,\n  IEncodeFeature,\n  IModel,\n  IModelUniform,\n  ITexture2D,\n} from '@antv/l7-core';\n\nimport BaseModel from '../../core/BaseModel';\nimport { PointImageTriangulation } from '../../core/triangulation';\nimport pointImageFrag from '../shaders/image_frag.glsl';\nimport pointImageVert from '../shaders/image_vert.glsl';\ninterface IImageLayerStyleOptions {\n  opacity: number;\n}\n\nexport default class ImageModel extends BaseModel {\n  private texture: ITexture2D;\n\n  public getUninforms(): IModelUniform {\n    const { opacity } = this.layer.getLayerConfig() as IImageLayerStyleOptions;\n    return {\n      u_opacity: opacity || 1.0,\n      u_texture: this.texture,\n      u_textSize: [1024, this.iconService.canvasHeight || 128],\n    };\n  }\n\n  public buildModels(): IModel[] {\n    this.registerBuiltinAttributes();\n    this.updateTexture();\n    this.iconService.on('imageUpdate', () => {\n      this.updateTexture();\n      this.layer.render(); // TODO 调用全局render\n    });\n    return [\n      this.layer.buildLayerModel({\n        moduleName: 'pointImage',\n        vertexShader: pointImageVert,\n        fragmentShader: pointImageFrag,\n        triangulation: PointImageTriangulation,\n        primitive: gl.POINTS,\n        depth: { enable: false },\n        blend: this.getBlend(),\n      }),\n    ];\n  }\n\n  protected registerBuiltinAttributes() {\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'size',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Size',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 1,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const { size = 5 } = feature;\n          return Array.isArray(size) ? [size[0]] : [size as number];\n        },\n      },\n    });\n\n    // point layer size;\n    this.styleAttributeService.registerStyleAttribute({\n      name: 'uv',\n      type: AttributeType.Attribute,\n      descriptor: {\n        name: 'a_Uv',\n        buffer: {\n          // give the WebGL driver a hint that this buffer may change\n          usage: gl.DYNAMIC_DRAW,\n          data: [],\n          type: gl.FLOAT,\n        },\n        size: 2,\n        update: (\n          feature: IEncodeFeature,\n          featureIdx: number,\n          vertex: number[],\n          attributeIdx: number,\n        ) => {\n          const iconMap = this.iconService.getIconMap();\n\n          const { shape } = feature;\n          const { x, y } = iconMap[shape as string] || { x: 0, y: 0 };\n          return [x, y];\n        },\n      },\n    });\n  }\n\n  private updateTexture() {\n    const { createTexture2D } = this.rendererService;\n    this.texture = createTexture2D({\n      data: this.iconService.getCanvas(),\n      mag: gl.LINEAR,\n      min: gl.LINEAR,\n      width: 1024,\n      height: this.iconService.canvasHeight || 128,\n    });\n  }\n}\n"],"file":"image.js"}