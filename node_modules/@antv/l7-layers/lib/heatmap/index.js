"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _BaseLayer2 = _interopRequireDefault(require("../core/BaseLayer"));

var _models = _interopRequireDefault(require("./models"));

var HeatMapLayer = function (_BaseLayer) {
  (0, _inherits2.default)(HeatMapLayer, _BaseLayer);

  function HeatMapLayer() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, HeatMapLayer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(HeatMapLayer)).call.apply(_getPrototypeOf2, [this].concat(args)));
    _this.type = 'HeatMapLayer';
    return _this;
  }

  (0, _createClass2.default)(HeatMapLayer, [{
    key: "buildModels",
    value: function buildModels() {
      var shape = this.getModelType();
      this.layerModel = new _models.default[shape](this);
      this.models = this.layerModel.buildModels();
    }
  }, {
    key: "renderModels",
    value: function renderModels() {
      var _this2 = this;

      var shape = this.getModelType();

      if (shape === 'heatmap') {
        if (this.layerModel) {
          this.layerModel.render();
        }

        return this;
      }

      if (this.layerModelNeedUpdate) {
        this.models = this.layerModel.buildModels();
        this.layerModelNeedUpdate = false;
      }

      this.models.forEach(function (model) {
        return model.draw({
          uniforms: _this2.layerModel.getUninforms()
        });
      });
      return this;
    }
  }, {
    key: "getConfigSchema",
    value: function getConfigSchema() {
      return {
        properties: {
          opacity: {
            type: 'number',
            minimum: 0,
            maximum: 1
          }
        }
      };
    }
  }, {
    key: "getModelType",
    value: function getModelType() {
      var _shapeAttribute$scale;

      var shapeAttribute = this.styleAttributeService.getLayerStyleAttribute('shape');

      var _this$getLayerConfig = this.getLayerConfig(),
          shape3d = _this$getLayerConfig.shape3d;

      var source = this.getSource();
      var sourceType = source.data.type;
      var shape = (shapeAttribute === null || shapeAttribute === void 0 ? void 0 : (_shapeAttribute$scale = shapeAttribute.scale) === null || _shapeAttribute$scale === void 0 ? void 0 : _shapeAttribute$scale.field) || 'heatmap';

      if (shape === 'heatmap' || shape === 'heatmap3d') {
        return 'heatmap';
      }

      if (sourceType === 'hexagon') {
        return (shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) === -1 ? 'hexagon' : 'grid3d';
      }

      if (sourceType === 'grid') {
        return (shape3d === null || shape3d === void 0 ? void 0 : shape3d.indexOf(shape)) === -1 ? 'grid' : 'grid3d';
      }

      return 'heatmap';
    }
  }]);
  return HeatMapLayer;
}(_BaseLayer2.default);

exports.default = HeatMapLayer;
//# sourceMappingURL=index.js.map