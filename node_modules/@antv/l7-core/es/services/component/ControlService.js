import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";

var _dec, _class, _temp;

import { DOM } from '@antv/l7-utils';
import { injectable } from 'inversify';
import { TYPES } from '../../types';
var ControlService = (_dec = injectable(), _dec(_class = (_temp = function () {
  function ControlService() {
    _classCallCheck(this, ControlService);

    this.container = void 0;
    this.controlCorners = void 0;
    this.controlContainer = void 0;
    this.scene = void 0;
    this.mapsService = void 0;
    this.controls = [];
    this.unAddControls = [];
  }

  _createClass(ControlService, [{
    key: "init",
    value: function init(cfg, sceneContainer) {
      this.container = cfg.container;
      this.scene = sceneContainer;
      this.mapsService = sceneContainer.get(TYPES.IMapService);
      this.initControlPos();
    }
  }, {
    key: "addControl",
    value: function addControl(ctr, sceneContainer) {
      var mapsService = sceneContainer.get(TYPES.IMapService);

      if (mapsService.map) {
        ctr.addTo(this.scene);
        this.controls.push(ctr);
      } else {
        this.unAddControls.push(ctr);
      }
    }
  }, {
    key: "getControlByName",
    value: function getControlByName(name) {
      return this.controls.find(function (ctr) {
        return ctr.controlOption.name === name;
      });
    }
  }, {
    key: "removeControl",
    value: function removeControl(ctr) {
      var index = this.controls.indexOf(ctr);

      if (index > -1) {
        this.controls.splice(index, 1);
      }

      ctr.remove();
      return this;
    }
  }, {
    key: "addControls",
    value: function addControls() {
      var _this = this;

      this.unAddControls.forEach(function (ctr) {
        ctr.addTo(_this.scene);

        _this.controls.push(ctr);
      });
      this.unAddControls = [];
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.controls[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var ctr = _step.value;
          ctr.remove();
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.controls = [];
      this.clearControlPos();
    }
  }, {
    key: "initControlPos",
    value: function initControlPos() {
      var corners = this.controlCorners = {};
      var l = 'l7-';
      var container = this.controlContainer = DOM.create('div', l + 'control-container', this.container);

      function createCorner(vSide, hSide) {
        var className = l + vSide + ' ' + l + hSide;
        corners[vSide + hSide] = DOM.create('div', className, container);
      }

      createCorner('top', 'left');
      createCorner('top', 'right');
      createCorner('bottom', 'left');
      createCorner('bottom', 'right');
    }
  }, {
    key: "clearControlPos",
    value: function clearControlPos() {
      for (var i in this.controlCorners) {
        if (this.controlCorners[i]) {
          DOM.remove(this.controlCorners[i]);
        }
      }

      if (this.controlContainer) {
        DOM.remove(this.controlContainer);
      }

      delete this.controlCorners;
      delete this.controlContainer;
    }
  }]);

  return ControlService;
}(), _temp)) || _class);
export { ControlService as default };
//# sourceMappingURL=ControlService.js.map