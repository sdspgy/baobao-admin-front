{"version":3,"sources":["../../src/transform/grid.ts"],"names":["Satistics","R_EARTH","aggregatorToGrid","data","option","dataArray","size","_pointsGridHash","gridHash","gridOffset","layerData","_getGridLayerDataFromGridHash","yOffset","xOffset","radius","type","latMin","Infinity","latMax","pLat","point","coordinates","Number","isFinite","centerLat","_calculateGridLatLonOffset","lat","lng","latIdx","Math","floor","lonIdx","key","count","points","push","cellSize","latitude","_calculateLatOffset","_calculateLonOffset","dy","PI","dx","cos","Object","keys","reduce","accu","i","idxs","split","parseInt","item","field","method","columns","getColumn","statMap","assign","_id","rawData"],"mappings":"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","sourcesContent":["/**\n * 生成四边形热力图\n */\nimport { IParserData, ITransform } from '@antv/l7-core';\nimport { Satistics } from '@antv/l7-utils';\n\ninterface IGridHash {\n  [key: string]: any;\n}\ninterface IGridOffset {\n  yOffset: number;\n  xOffset: number;\n}\nconst R_EARTH = 6378000;\n\nexport function aggregatorToGrid(data: IParserData, option: ITransform) {\n  const dataArray = data.dataArray;\n  const { size = 10 } = option;\n  const { gridHash, gridOffset } = _pointsGridHash(dataArray, size);\n  const layerData = _getGridLayerDataFromGridHash(gridHash, gridOffset, option);\n  return {\n    yOffset: gridOffset.yOffset / 2,\n    xOffset: gridOffset.xOffset / 2,\n    radius: gridOffset.xOffset,\n    type: 'grid',\n    dataArray: layerData,\n  };\n}\n\nfunction _pointsGridHash(dataArray: any[], size: number) {\n  let latMin = Infinity;\n  let latMax = -Infinity;\n  let pLat;\n\n  for (const point of dataArray) {\n    pLat = point.coordinates[1];\n    if (Number.isFinite(pLat)) {\n      latMin = pLat < latMin ? pLat : latMin;\n      latMax = pLat > latMax ? pLat : latMax;\n    }\n  }\n  const centerLat = (latMin + latMax) / 2;\n  // const centerLat = 34.54083;\n  const gridOffset = _calculateGridLatLonOffset(size, centerLat);\n  if (gridOffset.xOffset <= 0 || gridOffset.yOffset <= 0) {\n    return { gridHash: {}, gridOffset };\n  }\n  const gridHash: IGridHash = {};\n  for (const point of dataArray) {\n    const lat = point.coordinates[1];\n    const lng = point.coordinates[0];\n\n    if (Number.isFinite(lat) && Number.isFinite(lng)) {\n      const latIdx = Math.floor((lat + 90) / gridOffset.yOffset);\n      const lonIdx = Math.floor((lng + 180) / gridOffset.xOffset);\n      const key = `${latIdx}-${lonIdx}`;\n\n      gridHash[key] = gridHash[key] || { count: 0, points: [] };\n      gridHash[key].count += 1;\n      gridHash[key].points.push(point);\n    }\n  }\n\n  return { gridHash, gridOffset };\n}\n// 计算网格偏移量\nfunction _calculateGridLatLonOffset(cellSize: number, latitude: number) {\n  const yOffset = _calculateLatOffset(cellSize);\n  const xOffset = _calculateLonOffset(latitude, cellSize);\n  return { yOffset, xOffset };\n}\n\nfunction _calculateLatOffset(dy: number) {\n  return (dy / R_EARTH) * (180 / Math.PI);\n}\n\nfunction _calculateLonOffset(lat: number, dx: number) {\n  return ((dx / R_EARTH) * (180 / Math.PI)) / Math.cos((lat * Math.PI) / 180);\n}\nfunction _getGridLayerDataFromGridHash(\n  gridHash: IGridHash,\n  gridOffset: IGridOffset,\n  option: ITransform,\n) {\n  return Object.keys(gridHash).reduce((accu, key, i) => {\n    const idxs = key.split('-');\n    const latIdx = parseInt(idxs[0], 10);\n    const lonIdx = parseInt(idxs[1], 10);\n    const item: {\n      [key: string]: any;\n    } = {};\n    if (option.field && option.method) {\n      const columns = Satistics.getColumn(gridHash[key].points, option.field);\n      item[option.method] = Satistics.statMap[option.method](columns);\n    }\n    Object.assign(item, {\n      _id: i,\n      coordinates: [\n        -180 + gridOffset.xOffset * (lonIdx + 0.5),\n        -90 + gridOffset.yOffset * (latIdx + 0.5),\n      ],\n      rawData: gridHash[key].points,\n      count: gridHash[key].count,\n    });\n    // @ts-ignore\n    accu.push(item);\n    return accu;\n  }, []);\n}\n"],"file":"grid.js"}