import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/inherits";
import { AttributeType, gl } from '@antv/l7-core';
import BaseModel from '../../core/BaseModel';
import { HeatmapGridTriangulation } from '../../core/triangulation';
var heatmapGridVert = "precision highp float;\n// \u591A\u8FB9\u5F62\u9876\u70B9\u5750\u6807\nattribute vec3 a_Position;\n// \u591A\u8FB9\u5F62\u7ECF\u7EAC\u5EA6\u5750\u6807\nattribute vec3 a_Pos;\nattribute float a_Size;\nattribute vec4 a_Color;\nuniform vec2 u_radius;\nuniform float u_coverage: 0.9;\nuniform float u_angle: 0;\nuniform mat4 u_ModelMatrix;\nvarying vec4 v_color;\n\n#pragma include \"projection\"\n#pragma include \"picking\"\n\nvoid main() {\n  v_color = a_Color;\n\n  mat2 rotationMatrix = mat2(cos(u_angle), sin(u_angle), -sin(u_angle), cos(u_angle));\n  vec2 offset = a_Position.xy * u_radius * rotationMatrix * u_coverage ;\n  vec4 project_pos = project_position(vec4(a_Pos.xy + offset, 0, 1.0));\n  gl_Position = project_common_position_to_clipspace(project_pos);\n\n  setPickingColor(a_PickingColor);\n}\n";
var heatmapGridFrag = "precision highp float;\nvarying vec4 v_color;\nuniform float u_opacity: 1;\n\n#pragma include \"picking\"\n\nvoid main() {\n  gl_FragColor = v_color;\n  gl_FragColor.a *= u_opacity;\n\n  gl_FragColor = filterColor(gl_FragColor);\n}\n";

var GridModel = function (_BaseModel) {
  _inherits(GridModel, _BaseModel);

  function GridModel() {
    _classCallCheck(this, GridModel);

    return _possibleConstructorReturn(this, _getPrototypeOf(GridModel).apply(this, arguments));
  }

  _createClass(GridModel, [{
    key: "getUninforms",
    value: function getUninforms() {
      var _ref = this.layer.getLayerConfig(),
          opacity = _ref.opacity,
          coverage = _ref.coverage,
          angle = _ref.angle;

      return {
        u_opacity: opacity || 1.0,
        u_coverage: coverage || 0.9,
        u_angle: angle || 0,
        u_radius: [this.layer.getSource().data.xOffset, this.layer.getSource().data.yOffset]
      };
    }
  }, {
    key: "buildModels",
    value: function buildModels() {
      return [this.layer.buildLayerModel({
        moduleName: 'gridheatmap',
        vertexShader: heatmapGridVert,
        fragmentShader: heatmapGridFrag,
        triangulation: HeatmapGridTriangulation,
        depth: {
          enable: false
        },
        primitive: gl.TRIANGLES,
        blend: this.getBlend()
      })];
    }
  }, {
    key: "registerBuiltinAttributes",
    value: function registerBuiltinAttributes() {
      this.styleAttributeService.registerStyleAttribute({
        name: 'pos',
        type: AttributeType.Attribute,
        descriptor: {
          name: 'a_Pos',
          buffer: {
            usage: gl.DYNAMIC_DRAW,
            data: [],
            type: gl.FLOAT
          },
          size: 3,
          update: function update(feature, featureIdx) {
            var coordinates = feature.coordinates;
            return [coordinates[0], coordinates[1], 0];
          }
        }
      });
    }
  }]);

  return GridModel;
}(BaseModel);

export { GridModel as default };
//# sourceMappingURL=grid.js.map