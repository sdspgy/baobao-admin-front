"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sum = sum;
exports.max = max;
exports.min = min;
exports.mean = mean;
exports.mode = mode;
exports.getColumn = getColumn;
exports.getSatByColumn = getSatByColumn;
exports.statMap = void 0;

function max(x) {
  if (x.length === 0) {
    throw new Error('max requires at least one data point');
  }

  var value = x[0];

  for (var i = 1; i < x.length; i++) {
    if (x[i] > value) {
      value = x[i];
    }
  }

  return value;
}

function min(x) {
  if (x.length === 0) {
    throw new Error('min requires at least one data point');
  }

  var value = x[0];

  for (var i = 1; i < x.length; i++) {
    if (x[i] < value) {
      value = x[i];
    }
  }

  return value;
}

function sum(x) {
  if (x.length === 0) {
    return 0;
  }

  var sumNum = x[0] * 1;
  var correction = 0;
  var transition;

  for (var i = 1; i < x.length; i++) {
    transition = sumNum + x[i] * 1;

    if (Math.abs(sumNum) >= Math.abs(x[i])) {
      correction += sumNum - transition + x[i];
    } else {
      correction += x[i] - transition + sumNum;
    }

    sumNum = transition;
  }

  return sumNum + correction * 1;
}

function mean(x) {
  if (x.length === 0) {
    throw new Error('mean requires at least one data point');
  }

  return sum(x) / x.length;
}

function mode(x) {
  if (x.length === 0) {
    throw new Error('mean requires at least one data point');
  }

  if (x.length < 3) {
    return x[0];
  }

  x.sort();
  var last = x[0];
  var value = NaN;
  var maxSeen = 0;
  var seenThis = 1;

  for (var i = 1; i < x.length + 1; i++) {
    if (x[i] !== last) {
      if (seenThis > maxSeen) {
        maxSeen = seenThis;
        value = last;
      }

      seenThis = 1;
      last = x[i];
    } else {
      seenThis++;
    }
  }

  return value;
}

var statMap = {
  min: min,
  max: max,
  mean: mean,
  sum: sum,
  mode: mode
};
exports.statMap = statMap;

function getColumn(data, columnName) {
  return data.map(function (item) {
    return item[columnName];
  });
}

function getSatByColumn(type, column) {
  return statMap[type](column);
}
//# sourceMappingURL=statistics.js.map